[{"F:\\projects\\daily-planner\\src\\index.js":"1","F:\\projects\\daily-planner\\src\\App.js":"2","F:\\projects\\daily-planner\\src\\reportWebVitals.js":"3","F:\\projects\\daily-planner\\src\\components\\scheduleTable.js":"4","F:\\projects\\daily-planner\\src\\components\\ScheduleTable.js":"5","F:\\projects\\daily-planner\\src\\components\\Signup.js":"6","F:\\projects\\daily-planner\\src\\components\\firebase\\firebase.js":"7","F:\\projects\\daily-planner\\src\\components\\Session.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":7724,"mtime":1612916810885,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":425,"mtime":1611924470018,"results":"13","hashOfConfig":"10"},{"size":5782,"mtime":1612921421585,"results":"14","hashOfConfig":"10"},{"size":984,"mtime":1612874588315,"results":"15","hashOfConfig":"10"},{"size":510,"mtime":1612922329657,"results":"16","hashOfConfig":"10"},{"size":1896,"mtime":1612921442411,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"11daww4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"F:\\projects\\daily-planner\\src\\index.js",[],["38","39"],"F:\\projects\\daily-planner\\src\\App.js",["40"],"import React, { useState, useEffect, useRef } from 'react'\nimport './App.css'\nimport Signup from './components/Signup'\nimport firebase from 'firebase'\nimport Session from './components/Session'\n\nconst weekDays = ['Sun', 'Mon', 'Tues', 'Wed', 'Thu', 'Fri', 'Sat']\n\nconst App = () => {\n    const date = new Date()\n    const [user, setUser] = useState({})\n    const [allPlans, setAllPlans] = useState([])\n    const [currentDate, setCurrentDate] = useState(\n        date.getMonth() + 1 + '/' + date.getDate() + '/' + date.getFullYear()\n    )\n    const cDate = new Date(date)\n    const [selectedDay, setSelectedDay] = useState(weekDays[cDate.getDay()])\n\n    const sessionRef = useRef()\n\n    // GET DATA FOR USER AND SELECTED DATE\n    useEffect(() => {\n        const reqData = async () => {\n            try {\n                const res = await fetch('/API/data', {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        uid: user.uid,\n                        date: currentDate\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                const data = await res.json()\n                if (data.plans) setAllPlans(data.plans.data)\n                else setAllPlans([])\n            } catch (error) {\n                console.log('Data retrieval error: ', error)\n            }\n        }\n        if (user.uid) {\n            reqData()\n        }\n    }, [user, currentDate])\n\n    // USER CREATION IN DB\n    useEffect(() => {\n        const createUserInDB = async () => {\n            if (user.uid) {\n                if (\n                    firebase.auth().currentUser.metadata.lastSignInTime ===\n                    firebase.auth().currentUser.metadata.creationTime\n                ) {\n                    try {\n                        await fetch('/API/users/create', {\n                            method: 'POST',\n                            body: JSON.stringify({ uid: user.uid }),\n                            headers: {\n                                'Content-Type': 'application/json'\n                            }\n                        })\n                    } catch (error) {\n                        console.log('User Creation Error: ', error)\n                    }\n                }\n            }\n        }\n        createUserInDB()\n    }, [user])\n\n    // SEND CHANGES TO DB IF ANY\n    const sendToDB = async () => {\n        try {\n            await fetch('/API/data/send', {\n                method: 'POST',\n                body: JSON.stringify({\n                    uid: user.uid,\n                    date: currentDate,\n                    data: allPlans\n                }),\n                headers: { 'Content-Type': 'Application/json' }\n            })\n        } catch (e) {\n            console.log('Data Save Error : ', e)\n        }\n    }\n\n    // ON PAGE LEAVE\n    useEffect(() => {\n        return () => {\n            sendToDB()\n        }\n    }, [])\n\n    const handleSelectDay = (dayInd) => {\n        const pInd = weekDays.findIndex((day) => day === selectedDay)\n        const dist = dayInd - pInd\n        const date1 = new Date(currentDate)\n        var nextDay = new Date(date1)\n        nextDay.setDate(date1.getDate() + dist)\n        setSelectedDay(weekDays[dayInd])\n        setCurrentDate(\n            nextDay.getMonth() +\n                1 +\n                '/' +\n                nextDay.getDate() +\n                '/' +\n                nextDay.getFullYear()\n        )\n        sendToDB()\n    }\n\n    const handleWeekChange = (dist) => {\n        const date1 = new Date(currentDate)\n        var nextDay = new Date(date1)\n        nextDay.setDate(date1.getDate() + dist)\n        setCurrentDate(\n            nextDay.getMonth() +\n                1 +\n                '/' +\n                nextDay.getDate() +\n                '/' +\n                nextDay.getFullYear()\n        )\n        sendToDB()\n    }\n\n    const addSession = () => {\n        const temp = [...allPlans]\n        temp.push({\n            session_name: sessionRef.current.value,\n            skills: [],\n            tasks: []\n        })\n        sessionRef.current.value = ''\n        setAllPlans(temp)\n    }\n\n    const handleDeleteSession = (i) => {\n        const temp = [...allPlans]\n        temp.splice(i, 1)\n        setAllPlans(temp)\n    }\n\n    const updateSession = (ind, session) => {\n        const temp = [...allPlans]\n        temp[ind] = session\n        setAllPlans(temp)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"circle\" id=\"circle2\"></div>\n            <div className=\"circle\" id=\"circle1\"></div>\n            {!user.uid ? (\n                <div className=\"glassBackground\">\n                    <Signup setUser={setUser} />\n                </div>\n            ) : (\n                <>\n                    <div className=\"glassBackground\">\n                        <div className=\"weekDays\">\n                            {weekDays.map((day, ind) => (\n                                <div\n                                    key={ind}\n                                    className={\n                                        day === selectedDay\n                                            ? 'headSelected'\n                                            : 'head'\n                                    }\n                                    onClick={() => handleSelectDay(ind)}\n                                >\n                                    {day}\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"date-bar\">\n                            <div\n                                className=\"head\"\n                                onClick={() => handleWeekChange(-7)}\n                            >\n                                Prev. Week\n                            </div>\n                            <div className=\"head\">{currentDate}</div>\n                            <div\n                                className=\"head\"\n                                onClick={() => handleWeekChange(7)}\n                            >\n                                Next Week\n                            </div>\n                        </div>\n\n                        {allPlans ? (\n                            // null\n                            allPlans.map((sessionData, i) => (\n                                <Session\n                                    key={i}\n                                    ind={i}\n                                    data={sessionData}\n                                    deleteSession={() => handleDeleteSession(i)}\n                                    updateSession={updateSession}\n                                />\n                            ))\n                        ) : (\n                            <div>No Scheduled Tasks</div>\n                        )}\n                        <div className=\"addSessionForm\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"New Session Name\"\n                                ref={sessionRef}\n                            />\n\n                            <button onClick={addSession}>Add Session</button>\n                        </div>\n                    </div>\n                    <button\n                        onClick={() => {\n                            firebase.auth().signOut()\n                            sendToDB()\n                        }}\n                        className=\"signOut\"\n                    >\n                        Sign Out\n                    </button>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","F:\\projects\\daily-planner\\src\\reportWebVitals.js",[],"F:\\projects\\daily-planner\\src\\components\\scheduleTable.js",["41","42","43"],"F:\\projects\\daily-planner\\src\\components\\ScheduleTable.js",["44"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst ScheduleTable = (props) => {\r\n    const [skills, setSkills] = useState(props.skills)\r\n    const [tasks, setTasks] = useState(props.tasks)\r\n    const [addBtnText, setAddBtnText] = useState('Add Skill')\r\n    const [addTaskBtn, setAddTaskBtn] = useState('Add Task')\r\n\r\n    const skillRef = useRef()\r\n    const taskRef = useRef()\r\n    const durationRef = useRef()\r\n    const taskSkillRef = useRef()\r\n\r\n    useEffect(() => {\r\n        setSkills(props.skills)\r\n        setTasks(props.tasks)\r\n    }, [props])\r\n\r\n\r\n    useEffect(()=>{\r\n        props.setData({skills:skills, tasks:tasks})\r\n    }, [tasks, skills])\r\n\r\n    const handleAddSkill = () => {\r\n        if (addBtnText === 'Add Skill') {\r\n            const temp = [...skills]\r\n            temp.push(\r\n                <input type=\"text\" placeholder=\"Skill Name\" ref={skillRef} />\r\n            )\r\n            setSkills(temp)\r\n\r\n            setAddBtnText('Save')\r\n        } else {\r\n            setAddBtnText('Add Skill')\r\n            const temp = [...skills]\r\n            const skillName = skillRef.current.value\r\n            temp[temp.length - 1] = skillName\r\n            setSkills(temp)\r\n        }\r\n    }\r\n\r\n    const calculateScore = (skill) => {\r\n        let score = 0\r\n        tasks.forEach((task) => {\r\n            if (task.skills[skill]) score += task.skills[skill]\r\n        })\r\n        return score\r\n    }\r\n\r\n    const calulateTaskScore = (Task) => {\r\n        let sum = 0\r\n        Object.values(Task.skills).forEach((skill) => {\r\n            sum += skill\r\n        })\r\n        return sum\r\n    }\r\n\r\n    const handleDeleteTask = (ind) => {\r\n        const temp = [...tasks]\r\n        temp.splice(ind, 1)\r\n        setTasks(temp)\r\n    }\r\n\r\n    const handleAddTask = () => {\r\n        if (addTaskBtn === 'Add Task') {\r\n            const temp = [...tasks]\r\n            temp.push({\r\n                name: (\r\n                    <input\r\n                        type=\"text\"\r\n                        ref={taskRef}\r\n                        placeholder=\"New Task Name\"\r\n                    />\r\n                ),\r\n                duration: 0,\r\n                skills: {}\r\n            })\r\n            setTasks(temp)\r\n            setAddTaskBtn('Save Task')\r\n        } else {\r\n            setAddTaskBtn('Add Task')\r\n            const obj = { name: taskRef.current.value, duration: 0, skills: {} }\r\n            const temp = [...tasks]\r\n            temp[temp.length - 1] = obj\r\n            setTasks(temp)\r\n        }\r\n    }\r\n\r\n    const handleEditDuration = (ind) => {\r\n        const temp = [...tasks]\r\n        temp[ind].duration = (\r\n            <input type=\"text\" placeholder=\"Duration (m)\" ref={durationRef} />\r\n        )\r\n        setTasks(temp)\r\n    }\r\n\r\n    const handleDurationSave = (ind) => {\r\n        const temp = [...tasks]\r\n        temp[ind].duration = parseInt(durationRef.current.value)\r\n        setTasks(temp)\r\n    }\r\n    const handleTaskSkillEdit = (taskInd, skillInd) => {\r\n        const temp = [...tasks]\r\n        temp[taskInd].skills[skillInd] = (\r\n            <input type=\"text\" placeholder=\"Skill Score\" ref={taskSkillRef} />\r\n        )\r\n        setTasks(temp)\r\n    }\r\n\r\n    const handleSkillSave = (taskInd, skillInd) => {\r\n        const temp = [...tasks]\r\n        temp[taskInd].skills[skillInd] = parseInt(taskSkillRef.current.value)\r\n        setTasks(temp)\r\n    }\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td>\r\n                    <b>Duration</b>\r\n                </td>\r\n                {skills.map((skill, ind) => (\r\n                    <td key={ind}>\r\n                        <b>{skill}</b>\r\n                    </td>\r\n                ))}\r\n                <td>\r\n                    <b>Total</b>\r\n                </td>\r\n                <td>\r\n                    <button onClick={handleAddSkill}>{addBtnText}</button>\r\n                </td>\r\n            </tr>\r\n            {tasks.map((task, ind) => (\r\n                <tr key={ind}>\r\n                    <td className=\"icon-td\">\r\n                        <div\r\n                            onClick={() => handleDeleteTask(ind)}\r\n                            className=\"deleteIcon\"\r\n                        >\r\n                            <DeleteIcon />\r\n                        </div>\r\n                    </td>\r\n                    <td>\r\n                        <b>{task.name}</b>\r\n                    </td>\r\n                    <td\r\n                        onClick={() => handleEditDuration(ind)}\r\n                        onBlur={() => {\r\n                            handleDurationSave(ind)\r\n                        }}\r\n                    >\r\n                        {task.duration}\r\n                    </td>\r\n                    {skills.map((skill, i) => (\r\n                        <td\r\n                            key={i}\r\n                            onClick={() => handleTaskSkillEdit(ind, skill)}\r\n                            onBlur={() => handleSkillSave(ind, skill)}\r\n                        >\r\n                            {task.skills[skill]}\r\n                        </td>\r\n                    ))}\r\n                    <td>{calulateTaskScore(task)}</td>\r\n                </tr>\r\n            ))}\r\n            <tr className=\"lastRow\">\r\n                <td></td>\r\n                <td>\r\n                    <button onClick={handleAddTask}>{addTaskBtn}</button>\r\n                </td>\r\n                <td>\r\n                    <b>Total</b>\r\n                </td>\r\n                {skills.map((skill, i) => {\r\n                    return <td key={i}>{calculateScore(skill)}</td>\r\n                })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default ScheduleTable\r\n","F:\\projects\\daily-planner\\src\\components\\Signup.js",[],"F:\\projects\\daily-planner\\src\\components\\firebase\\firebase.js",[],"F:\\projects\\daily-planner\\src\\components\\Session.js",["45"],"import React, { useState, useEffect } from 'react'\r\nimport ScheduleTable from './ScheduleTable'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst Session = ({ ind, data, deleteSession, updateSession }) => {\r\n    const [sessionName, setSessionName] = useState(data.session_name)\r\n    const [sessionData, setSessionData] = useState({\r\n        skills: data.skills,\r\n        tasks: data.tasks\r\n    })\r\n\r\n    useEffect(() => {\r\n        setSessionName(data.session_name)\r\n        setSessionData({ skills: data.skills, tasks: data.tasks })\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            data.tasks !== sessionData.tasks ||\r\n            data.skills !== sessionData.skills\r\n        ) {\r\n            updateSession(ind, {\r\n                session_name: sessionName,\r\n                skills: sessionData.skills,\r\n                tasks: sessionData.tasks\r\n            })\r\n        }\r\n    }, [sessionData])\r\n\r\n    return (\r\n        <div className=\"sessionTable\">\r\n            <div className=\"sessionTitle\">\r\n                <h1>{sessionName}</h1>\r\n                <div>\r\n                    {/* <span className=\"iconBtn\" onClick={handleEdit}>\r\n                        <EditIcon />\r\n                    </span> */}\r\n                    <span className=\"iconBtn\" onClick={deleteSession}>\r\n                        <DeleteIcon />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <col style={{ width: '5%' }} />\r\n\r\n                <ScheduleTable\r\n                    skills={sessionData.skills}\r\n                    tasks={sessionData.tasks}\r\n                    setData={setSessionData}\r\n                />\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Session\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":94,"column":8,"nodeType":"52","endLine":94,"endColumn":10,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":4,"column":18,"nodeType":"56","messageId":"57","endLine":4,"endColumn":27},{"ruleId":"58","severity":2,"message":"59","line":4,"column":31,"nodeType":"56","endLine":4,"endColumn":39},{"ruleId":"60","severity":1,"message":"61","line":10,"column":29,"nodeType":"62","messageId":"63","endLine":10,"endColumn":31},{"ruleId":"50","severity":1,"message":"64","line":23,"column":8,"nodeType":"52","endLine":23,"endColumn":23,"suggestions":"65"},{"ruleId":"50","severity":1,"message":"66","line":28,"column":8,"nodeType":"52","endLine":28,"endColumn":21,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sendToDB'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-unused-vars","'setSkills' is assigned a value but never used.","Identifier","unusedVar","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"scheduleTable\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["71"],"React Hook useEffect has missing dependencies: 'data.skills', 'data.tasks', 'ind', 'sessionName', and 'updateSession'. Either include them or remove the dependency array. If 'updateSession' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [sendToDB]",{"range":"79","text":"80"},"Update the dependencies array to be: [tasks, skills, props]",{"range":"81","text":"82"},"Update the dependencies array to be: [data.skills, data.tasks, ind, sessionData, sessionName, updateSession]",{"range":"83","text":"84"},[2997,2999],"[sendToDB]",[707,722],"[tasks, skills, props]",[909,922],"[data.skills, data.tasks, ind, sessionData, sessionName, updateSession]"]